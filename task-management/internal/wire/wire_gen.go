// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/cnc-csku/task-nexus/task-management/config"
	"github.com/cnc-csku/task-nexus/task-management/domain/services"
	"github.com/cnc-csku/task-nexus/task-management/internal/adapters/repositories/mongo"
	"github.com/cnc-csku/task-nexus/task-management/internal/adapters/rest"
	"github.com/cnc-csku/task-nexus/task-management/internal/infrastructure/api"
	"github.com/cnc-csku/task-nexus/task-management/internal/infrastructure/database"
	"github.com/cnc-csku/task-nexus/task-management/internal/infrastructure/router"
	"github.com/cnc-csku/task-nexus/task-management/middlewares"
)

// Injectors from wire.go:

func InitializeApp() *api.EchoAPI {
	context := NewCtx()
	configConfig := config.NewConfig()
	client := database.NewMongoClient(configConfig, context)
	authMiddleware := middlewares.NewAdminJWTMiddleware(configConfig)
	healthCheckHandler := rest.NewHealthCheckHandler()
	globalSettingRepository := mongo.NewMongoGlobalSettingRepo(configConfig, client)
	commonService := services.NewCommonService(globalSettingRepository)
	commonHandler := rest.NewCommonHandler(commonService)
	userRepository := mongo.NewMongoUserRepo(configConfig, client)
	userService := services.NewUserService(configConfig, userRepository, globalSettingRepository)
	userHandler := rest.NewUserHandler(userService)
	workspaceRepository := mongo.NewMongoWorkspaceRepo(configConfig, client)
	projectRepository := mongo.NewMongoProjectRepo(configConfig, client)
	projectService := services.NewProjectService(userRepository, workspaceRepository, projectRepository, configConfig)
	projectHandler := rest.NewProjectHandler(projectService)
	invitationRepository := mongo.NewMongoInvitationRepo(configConfig, client)
	invitationService := services.NewInvitationService(userRepository, workspaceRepository, invitationRepository, configConfig)
	invitationHandler := rest.NewInvitationHandler(invitationService)
	workspaceService := services.NewWorkspaceService(workspaceRepository, globalSettingRepository, userRepository)
	workspaceHandler := rest.NewWorkspaceHandler(workspaceService)
	routerRouter := router.NewRouter(authMiddleware, healthCheckHandler, commonHandler, userHandler, projectHandler, invitationHandler, workspaceHandler)
	echoAPI := api.NewEchoAPI(context, configConfig, client, routerRouter)
	return echoAPI
}
